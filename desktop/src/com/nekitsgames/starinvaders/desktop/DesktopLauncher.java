/*
 * Copyright (c) 20016 - 2017, NG Tech and/or its affiliates. All rights reserved.
 * GNI GPL v3 licence . Use is subject to license terms
 */

package com.nekitsgames.starinvaders.desktop;

import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
import com.nekitsgames.starinvaders.API.settingsApi.Settings2API;
import com.nekitsgames.starinvaders.StarInvaders;
import com.nekitsgames.starinvaders.classes.Exceptions.SettingsAccessException;
import org.lwjgl.Sys;

import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Properties;
import java.util.Scanner;

/**
 * Launcher for Desktops
 *
 * Launches game from core package on Windows, Linux, macOS. Generated by libGDX.
 *
 * @author Nikita Serba
 * @version 2.0
 * @since 1.0
 */
public class DesktopLauncher {

    public static String md5Custom(String st) {
        MessageDigest messageDigest = null;
        byte[] digest = new byte[0];

        try {
            messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            messageDigest.update(st.getBytes());
            digest = messageDigest.digest();
        } catch (NoSuchAlgorithmException e) {
            // тут можно обработать ошибку
            // возникает она если в передаваемый алгоритм в getInstance(,,,) не существует
            e.printStackTrace();
        }

        BigInteger bigInt = new BigInteger(1, digest);
        String md5Hex = bigInt.toString(16);

        while( md5Hex.length() < 32 ){
            md5Hex = "0" + md5Hex;
        }

        return md5Hex;
    }

    private static final String KEY = "e312f97923ce0985cc30855b15d8318c";

	/**
	 * Launcher for Desktops
	 *
	 * Launches game from core package on Windows, Linux, macOS. Generated by libGDX.
	 *
	 * @since 1.0
	 * @param arg - console arguments.
	 * @throws IOException if can't access properties files
	 */
    public static void main(String[] arg) throws IOException, SettingsAccessException {
        Properties prop = new Properties();
        Settings2API set = new Settings2API();
        set.load("game");
        if (!((set.get("key", " ")).equals(KEY))) {
            System.out.print("Hello. this is closed beta test. Enter your beta key: ");
            Scanner s = new Scanner(System.in);
            String key = s.nextLine();
            key = md5Custom(key);
            if (key.equals(KEY)) {
                System.out.println("You entered valid key. Starting game...");
                set.set("key", KEY);
            } else {
                System.out.print("Your entered invalid key!");
                System.exit(-1);
            }
        }
        prop.load(new FileInputStream("properties/main.properties"));
			LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
			config.title = prop.getProperty("app.name") + prop.getProperty("app.version");
			config.width = Integer.parseInt(prop.getProperty("resolution.width"));
			config.height = Integer.parseInt(prop.getProperty("resolution.height"));
			config.fullscreen = true;
			config.samples = (Integer) set.get("msaa", 1);
			config.useGL30 = (Integer) set.get("gl", 0) == 1;
			config.allowSoftwareMode = (Boolean) set.get("smode", false);
			config.vSyncEnabled = (Boolean) set.get("vsync", false);
			prop.load(new FileInputStream("properties/defaults.properties"));
        config.foregroundFPS = (Integer) set.get("FPS.limit", Integer.parseInt(prop.getProperty("settings.FPS.limit")));
        config.backgroundFPS = (Integer) set.get("FPS.limit", Integer.parseInt(prop.getProperty("settings.FPS.limit")));
        set.save();
        new LwjglApplication(new StarInvaders(), config);
	}

}
